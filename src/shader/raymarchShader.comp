#version 460 core 
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0)
uniform image2D screen;
layout(rgba32f, binding = 1)
uniform image2D skybox;

uniform mat4 projection;
uniform mat4 view;

uniform float x1;
uniform float x2;


struct Object
{
	int model;
	vec3 position;
	vec3 size;
	vec3 albedo;
    vec3 specular;
};

uniform Object objects [32];

const float PI = 3.14159265;

float smin(float a, float b, float k) {
    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
    return mix(a, b, h) - k*h*(1.0-h);
}

float sdSphere(vec3 p, float r) 
{
    return length(p) - r;
}

float sdPlane( vec3 p )
{
  // n must be normalized
  return p.y;
}

vec2 opU( vec2 d1, vec2 d2 )
{
	return (d1.x<d2.x) ? d1 : d2;
}

vec2 sceneSDF(vec3 samplePoint) {
	vec2 dist = vec2(samplePoint.y, -1);
	
	for (int i=0; i < objects.length(); i++)
	{
		if (objects[i].model == 0)
			dist = opU(dist, vec2(sdPlane(samplePoint - objects[i].position), i));
		else if (objects[i].model == 1)
			dist = opU(dist, vec2(sdSphere(samplePoint - objects[i].position, objects[i].size.x), i));
	}

    return dist;
}

vec2 raymarch(vec3 origin, vec3 dir, float start, float end) 
{
    float depth = start;
    for (int i = 0; i < 255; i++) {
        vec2 res = sceneSDF(origin + depth * dir);
        if (res.x < 0.001) {
			res.x = depth;
			return res;
        }
        depth += res.x;
        if (depth >= end) {
            break;
        }
    }
    //float theta = acos(dir).y / -PI;
    //float phi = atan(dir.x, -dir.z) / -PI * 0.5;
    //return imageLoad(skybox, int2(phi, theta));
	return vec2(-1, -1);
}

float calcSoftshadow( in vec3 ro, in vec3 dir, in float mint, in float tmax )
{
    float res = 1.0;
    float t = mint;
    float ph = 1e10; // big, such that y = 0 on the first iteration
    
    for( int i=0; i<32; i++ )
    {
		float h = sceneSDF( ro + dir*t ).x;
        {
            // use this if you are getting artifact on the first iteration, or unroll the
            // first iteration out of the loop
            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); 

            float y = h*h/(2.0*ph);
            float d = sqrt(h*h-y*y);
            res = min( res, 10.0*d/max(0.0,t-y) );
            ph = h;
        }
        
        t += h;
        
        if( res<0.0001 || t>tmax ) break;
        
    }
    res = clamp( res, 0.0, 1.0 );
    return res*res*(3.0-2.0*res);
}

float calcAO( in vec3 pos, in vec3 nor )
{
	float occ = 0.0;
    float sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float h = 0.001 + 0.15*float(i)/4.0;
        float d = sceneSDF( pos + h*nor ).x;
        occ += (h-d)*sca;
        sca *= 0.670;
    }
    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    
}

vec3 calcNormal( in vec3 pos )
{
#if 0
    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;
    return normalize( e.xyy*sceneSDF( pos + e.xyy ).x + 
					  e.yyx*sceneSDF( pos + e.yyx ).x + 
					  e.yxy*sceneSDF( pos + e.yxy ).x + 
					  e.xxx*sceneSDF( pos + e.xxx ).x );
#else
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    vec3 n = vec3(0.0);
    for( int i=0; i<4; i++ )
    {
        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);
        n += e*sceneSDF(pos+0.0005*e).x;
      //if( n.x+n.y+n.z>100.0 ) break;
    }
    return normalize(n);
#endif    
}

vec3 shade(vec2 res, vec3 origin, vec3 dir)
{
	// background
    vec3 col = vec3(0.7, 0.7, 0.9) - max(dir.y,0.0)*0.3;
    
    // raycast scene
    float t = res.x;
	float m = res.y;
    if( m>-0.5 )
    {
        vec3 pos = origin + t*dir;
        vec3 nor = (m==0) ? vec3(0.0,1.0,0.0) : calcNormal( pos );
        vec3 ref = reflect( dir, nor );
        
		// lighting
        float occ = calcAO( pos, nor );

        // material        
        col = objects[int(m)].albedo + ((occ-1)*0.16);
        vec3 ks = objects[int(m)].specular;
        
		vec3 lin = vec3(0.0);

        // sun
        {
            vec3  lig = normalize( vec3(-0.5, 0.4, -0.6) );
            vec3  hal = normalize( lig-dir );
            float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
			//if( dif>0.0001 )
        	dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );
			float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0);
            spe *= dif;
            spe *= 0.04+0.96*pow(clamp(1.0-dot(hal,lig),0.0,1.0),5.0);
            //spe *= 0.04+0.96*pow(clamp(1.0-sqrt(0.5*(1.0-dot(dir,lig))),0.0,1.0),5.0);
            lin += col*2.20*dif*vec3(1.30,1.00,0.70);
            lin += 5.00*spe*vec3(1.30,1.00,0.70)*ks;
        }
        // sky
        {
            float dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));
            dif *= occ;
            float spe = smoothstep( -0.2, 0.2, ref.y );
            spe *= dif;
            spe *= 0.04+0.96*pow(clamp(1.0+dot(nor,dir),0.0,1.0), 5.0 );
            //if( spe>0.001 )
            spe *= calcSoftshadow( pos, ref, 0.02, 2.5 );
            lin += col*0.60*dif*vec3(0.40,0.60,1.15);
            lin += 2.00*spe*vec3(0.40,0.60,1.30)*ks;
        }
        // back
		{
		
        	float dif = clamp( dot( nor, normalize(vec3(0.5,0.0,0.6))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);
            dif *= occ;
        	lin -= col*0.55*dif*vec3(0.25,0.25,0.25);
        }
        // sss
		{

            //float dif = pow(clamp(1.0+dot(nor,dir),0.0,1.0),2.0);
            //dif *= occ;
        	//lin += (col*0.25*dif*vec3(1.00,1.00,1.00));
        }
        
		col = lin;

        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );
    }

	return pow( col, vec3(0.4545) );
}


void main()
{
    ivec2 pixel_coodirs = ivec2(gl_GlobalInvocationID.xy);
	
    ivec2 screenSize = imageSize(screen);
    vec2 uv = vec2((pixel_coodirs.xy + vec2(0.5f, 0.5f)) / vec2(screenSize.x, screenSize.y) * 2.0 - 1.0);

    vec3 origin = vec3(view * vec4(0.0, 0.0, 0.0, 1.0));
	vec3 dir = vec3(projection * vec4(uv, 0.0, 1.0));
    // Transform the direction from camera to world space and normalize
    dir = vec3(view * vec4(dir, 0.0f));
    dir = normalize(dir);

	vec2 res = raymarch(origin, dir, 0.0, 100.0);

    vec4 pixel = clamp(vec4(shade(res, origin, dir), res.x), vec4(0), vec4(1));

    imageStore(screen, pixel_coodirs, pixel);
}